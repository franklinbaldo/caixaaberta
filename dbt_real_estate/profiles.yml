# dbt_real_estate/profiles.yml

# This configuration tells dbt how to connect to your DuckDB database.
# Profile name should match the 'profile' in dbt_project.yml
dbt_real_estate_profile: # This is the profile name referenced in dbt_project.yml
  target: dev # Defines which target to use by default. 'dev' is a common convention.
  outputs:
    dev:
      type: duckdb
      path: real_estate_data.db # Path to your DuckDB database file. This will be created in the dbt project directory.
      # Optional: specify extensions to load, e.g., httpfs for remote files
      # extensions:
      #   - httpfs
      #   - parquet
      # Optional: use a specific schema by default for models if not specified elsewhere.
      # schema: main # 'main' is the default schema in DuckDB
      # Optional: add more settings like threads, memory_limit, etc.
      # threads: 4 # Number of threads for dbt to use
      # memory_limit_gb: 1 # Example memory limit for DuckDB

# You can define other targets, e.g., for production or CI:
# prod:
#   type: duckdb
#   path: prod_real_estate_data.db
#   threads: 8

# When running dbt commands, you can specify the target:
# dbt run --target dev
# dbt run --target prod

# To use this profiles.yml, either:
# 1. Set the environment variable: export DBT_PROFILES_DIR=$(pwd)/dbt_real_estate
# 2. Or run dbt commands from within the 'dbt_real_estate' directory using:
#    dbt run --profiles-dir .
#    (or simply `dbt run` if dbt picks it up from current dir, though explicit is better)
# 3. Or place this file in ~/.dbt/profiles.yml (standard location, but less project-specific)
